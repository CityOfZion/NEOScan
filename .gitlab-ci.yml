stages:
  - test
  - docs
  - build
  - docker
  - deploy

variables:
  POSTGRES_DB: neoscan_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: "postgres"

before_script:
  - export IMAGE_TAG="$CI_PIPELINE_ID-$CI_COMMIT_REF_SLUG"
  - export REGISTRY_PATH="$CI_REGISTRY_IMAGE:$IMAGE_TAG"
  - export SYNC_REGISTRY_PATH="$CI_REGISTRY_IMAGE/sync:$IMAGE_TAG"
  - export API_REGISTRY_PATH="$CI_REGISTRY_IMAGE/api:$IMAGE_TAG"

test:
  stage: test
  image: bitwalker/alpine-elixir-phoenix:1.7.0
  services:
    - postgres
  cache:
    key: build-cache
    paths:
      - deps/
      - _build/
  script:
    - mix local.rebar --force
    - mix local.hex --force
    - mix deps.get
    - mix format --check-formatted
    - mix coveralls.post -u --token "${COVERALLS_REPO_TOKEN}" --branch "${CI_COMMIT_REF_NAME}" --message "${CI_COMMIT_TITLE}" --sha "${CI_COMMIT_SHA}"
    - rm -Rf _build/test/lib/neo*
  artifacts:
    paths:
      - apps/neoscan_web/assets/static/docs/api.apib

docs:
  stage: docs
  image:
    name: humangeo/aglio
    entrypoint: [""]
  script:
    - aglio --theme-variables streak --theme-template triple -i apps/neoscan_web/assets/static/docs/api.apib -o apps/neoscan_web/assets/static/docs/index.html
  artifacts:
    paths:
      - apps/neoscan_web/assets/static/docs/index.html

build:
  stage: build
  image: bitwalker/alpine-elixir-phoenix:1.7.0
  cache:
    key: build-cache
    paths:
    - deps/
    - _build/
  variables:
    MIX_ENV: prod
  script:
  - mix local.rebar --force
  - mix local.hex --force
  - mix deps.get
  - cd apps/neoscan_web/assets && npm install && npm run deploy
  - mix compile
  - mix phx.digest
  - mix release --env=prod
  - mkdir export
  - RELEASE_DIR=`ls -d _build/prod/rel/neoscan/releases/*/` && tar -xf "$RELEASE_DIR/neoscan.tar.gz" -C export/
  artifacts:
    paths:
    - export

docker:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build -t $REGISTRY_PATH .
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker push $REGISTRY_PATH
    - "[ \"$CI_COMMIT_REF_SLUG\" == \"master\" ] && docker tag $REGISTRY_PATH $CI_REGISTRY_IMAGE || true"
    - "[ \"$CI_COMMIT_REF_SLUG\" == \"master\" ] && docker push $CI_REGISTRY_IMAGE || true"

#staging:
#  stage: deploy
#  environment: staging
#  script:
#    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" $CI_REGISTRY
#    - docker-compose -f docker-compose.prod.yml up -d
#  variables:
#    HOST: neoscan.backslash.fr
#  tags:
#    - staging
#  when: manual
#

productionk:
  stage: deploy
  image:
    name: lachlanevenson/k8s-kubectl
    entrypoint: [""]
  environment: productionk
  script:
    - mkdir ~/.kube && echo "${PROD_KUB_CONFIG}" > ~/.kube/config
    - ./deploy
  variables:
    DB_USERNAME: ${PROD_DB_USER}
    DB_PASSWORD: ${PROD_DB_PASSWORD}
    DB_INSTANCE: ${PROD_DB_INSTANCE}
  when: manual