defmodule Neoscan.BlockGasGeneration do
  @moduledoc false

  @generation_amount [8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  @generation_length 22
  @decrement_interval 2_000_000

  @doc """
  Calculate the amount of gas generated by a block
  """
  def get_amount_generate_in_block(nil), do: nil

  def get_amount_generate_in_block(0), do: Enum.at(@generation_amount, 0) * 1.0

  def get_amount_generate_in_block(index) do
    if Integer.floor_div(index, @decrement_interval) > @generation_length do
      0.0
    else
      position = Integer.floor_div(index, @decrement_interval)
      Enum.at(@generation_amount, position) * 1.0
    end
  end

  def get_range_amount(min, max) do
    generation =
      for x <- 1..Enum.count(@generation_amount) do
        {Enum.at(@generation_amount, x - 1), (x - 1) * @decrement_interval,
         x * @decrement_interval - 1}
      end

    [{gas, _, rmax} | t] =
      Enum.filter(generation, fn {_, rmin, rmax} -> min <= rmax and max >= rmin end)

    [{gas, rmin, _} | t] = Enum.reverse([{gas, min, rmax} | t])
    generation = Enum.reverse([{gas, rmin, max} | t])

    Enum.reduce(generation, 0, fn {gas, min, max}, acc ->
      acc + gas * (max - min + 1)
    end)
  end
end
